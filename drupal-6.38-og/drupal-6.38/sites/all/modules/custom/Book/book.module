<?php
/**
* Implementation of hook_node_info().
*/
function book_node_info() {
// We return an array since a module can define multiple node types.
// We're only defining one node type, type 'book'.
return array(
'book' => array(
'name' => t('Book'), // Required.
'module' => 'book', // Required.
'description' => t('Describe book details.'), // Required.
'has_title' => TRUE,
'title_label' => t('Book Name'),
'has_body' => TRUE,
'body_label' => t('Description'),
'min_word_count' => 2,
'locked' => TRUE
)
);
}

/**
* Implementation of hook_menu_alter().
*/
function book_menu_alter(&$callbacks) {
// If the user does not have 'administer nodes' permission,
// disable the book menu item by setting its access callback to FALSE.
if (!user_access('administer nodes')) {
$callbacks['node/add/book']['access callback'] = FALSE;
// Must unset access arguments or Drupal will use user_access()
// as a default access callback.
unset($callbacks['node/add/book']['access arguments']);
}
}


/**
* Implementation of hook_perm().
*/
function book_perm() {
return array('create book', 'edit book', 'delete book', 'view book');
}


/**
* Implementation of hook_access().
*/
function book_access($op, $node, $account) {
$is_author = $account->uid == $node->uid;
switch ($op) {
case 'create':
// Allow if user's role has 'create joke' permission.
return user_access('create book', $account);
    
case 'update':
// Allow if user's role has 'edit own joke' permission and user is
// the author; or if the user's role has 'edit any joke' permission.
return user_access('edit book', $account) && $is_author ||
user_access('edit book', $account);
    
case 'delete':
// Allow if user's role has 'delete own joke' permission and user is
// the author; or if the user's role has 'delete any joke' permission.
return user_access('delete book', $account) && $is_author ||
user_access('delete book', $account);
    
case 'view':
// Allow if user's role has 'delete own joke' permission and user is
// the author; or if the user's role has 'delete any joke' permission.
return user_access('view book', $account) && $is_author ||
user_access('view book', $account);
}
}


/**
* Implementation of hook_form().
*/
function book_form($node) {
$type = node_get_types('type', $node);
$form['title'] = array(
'#type' => 'textfield',
'#title' => check_plain($type->title_label),
'#required' => TRUE,
'#default_value' => $node->title,
'#weight' => -5,
'#maxlength' => 255,);

$form['body_filter']['body'] = array(
'#type' => 'textarea',
'#title' => check_plain($type->body_label),
'#default_value' => $node->body,
'#rows' => 4,
'#required' => TRUE,);
//$form['body_filter']['filter'] = filter_form($node->format);
$form['price'] = array(
'#type' => 'textfield',
'#title' => t('Price'),
'#required' => TRUE,
'#default_value' => isset($node->price) ? $node->price : '',
'#weight' => 5);

$form['Author'] = array(
'#type' => 'textfield',
'#title' => t('Author'),
'#required' => TRUE,
'#default_value' => isset($node->Author) ? $node->Author : '',
'#weight' => 7);

$form['no_of_pages'] = array(
'#type' => 'textfield',
'#title' => t('No of Pages'),
'#required' => TRUE,
'#default_value' => isset($node->no_of_pages) ? $node->no_of_pages : '',
'#weight' => 7);

$form['company'] = array(
'#type' => 'textfield',
'#title' => t('Company'),
'#required' => TRUE,
'#default_value' => isset($node->company) ? $node->company : '',
'#weight' => 8);


return $form;
}

/**
* Implementation of hook_validate().
*/
//function book_validate($node) {
//// Enforce a maximum price should be 1000.
//if (isset($node->price) && $node->price > 1000) {
//$type = node_get_types('type', $node);
//form_set_error('price', t('The price of  @type is too high.It should be under 1000.', array('@type' => $type->name)));
//}
//}

/**
* Implementation of hook_insert().
*/
function book_insert($node) {
db_query("INSERT INTO {book} (nid, name, description, price, Author, no_of_pages, company, created) VALUES (%d, '%s', '%s', %d, '%s', %d, '%s', %d)",
$node->nid,  $node->title, $node->body, $node->price, $node->Author, $node->no_of_pages, $node->company, time());
}

/**
* Implementation of hook_update().
*/
function book_update(&$node) {
    
if ($node->revision) {
// New revision; treat it as a new record.
joke_insert($node);
}else{
db_query("UPDATE {book} SET description = '%s', price=%d ,Author= '%s', no_of_pages=%d, company= '%s' WHERE nid = %d",
$node->body, $node->price ,$node->Author, $node->no_of_pages, $node->company, $node->nid);
}
}

/**
* Implementation of hook_delete().
*/
function book_delete(&$node) {
// Delete the related information we were saving for this node.
db_query('DELETE FROM {book} WHERE nid = %d', $node->nid);
}

/**
* Implementation of hook_load().
*/
function book_load($node) {
return db_fetch_object(db_query('SELECT price, Author, no_of_pages , company FROM {book} WHERE nid = %d',
$node->nid));
}

/**
* Implementation of hook_view().
*/
function book_view($node, $teaser = FALSE, $page = FALSE) {
// If $teaser is FALSE, the entire node is being displayed.
if (!$teaser) {
// Use Drupal's default node view.
$node = node_prepare($node, $teaser);

$node->content['price'] = array(
'#value' => theme('book_price', $node),
'#weight' => 2
);

$node->content['Author'] = array(
'#value' => theme('book_Author', $node),
'#weight' => 3
);

$node->content['no_of_pages'] = array(
'#value' => theme('book_no_of_pages', $node),
'#weight' => 4
);

$node->content['company'] = array(
'#value' => theme('book_company', $node),
'#weight' => 5
);

}
// If $teaser is TRUE, node is being displayed as a teaser,
// such as on a node listing page. We omit the price in this case.
if ($teaser) {
// Use Drupal's default node view.
$node = node_prepare($node, $teaser);
}
return $node;
}

/**
* Implementation of hook_theme().
* We declare book_price so Drupal will look for a function
* named theme_book_price().
*/
//function book_theme() {
//return array(
//'book_price' => array(
//'arguments' => array('node'),
//),
//'book_Author' => array(
//'arguments' => array('node'),
//),
//'book_no_of_pages' => array(
//'arguments' => array('node'),
//),
//'book_company' => array(
//'arguments' => array('node'),
//),
//);
//}
//
//function theme_book_price($node) {
//$output = '<div class="book-price">'.
//check_markup("Price: ".$node->price). '</div>';
//return $output;
//}
//
//function theme_book_Author($node) {
//$output = '<div class="book-Author">'.
//check_markup("Author: ".$node->Author). '</div>';
//return $output;
//}
//
//function theme_book_no_of_pages($node) {
//$output = '<div class="book-no-of-pages">'.
//check_markup("No of Pages: ".$node->no_of_pages). '</div>';
//return $output;
//}
//
//function theme_book_company($node) {
//$output = '<div class="book-company">'.
//check_markup("Company: ".$node->company). '</div>';
//return $output;
//}
